{"name": "test_launch_video[firefox]", "status": "broken", "statusDetails": {"message": "playwright._impl._api_types.TimeoutError: Timeout 30000.0ms exceeded while waiting for event \"popup\"\n=========================== logs ===========================\nwaiting for event \"popup\"\n============================================================", "trace": "self = <pages.videos.FoxtelVideoPage object at 0x000001B16D2AE7C0>\n\n    def launch_video(self) -> None:\n    \n        with self.page.expect_popup() as popup_info:\n>           self.page.locator(self.video_link).click()\n\npages\\videos.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Locator frame=<Frame name= url='https://www.foxsports.com.au/video'> selector='//div[@aria-labe =\"video thumbnail row\"][1]/div/div[2]'>\n\n    def click(\n        self,\n        *,\n        modifiers: typing.Optional[\n            typing.List[Literal[\"Alt\", \"Control\", \"Meta\", \"Shift\"]]\n        ] = None,\n        position: Position = None,\n        delay: float = None,\n        button: Literal[\"left\", \"middle\", \"right\"] = None,\n        click_count: int = None,\n        timeout: float = None,\n        force: bool = None,\n        no_wait_after: bool = None,\n        trial: bool = None\n    ) -> NoneType:\n        \"\"\"Locator.click\n    \n        This method clicks the element by performing the following steps:\n        1. Wait for [actionability](./actionability.md) checks on the element, unless `force` option is set.\n        1. Scroll the element into view if needed.\n        1. Use `page.mouse` to click in the center of the element, or the specified `position`.\n        1. Wait for initiated navigations to either succeed or fail, unless `noWaitAfter` option is set.\n    \n        If the element is detached from the DOM at any moment during the action, this method throws.\n    \n        When all steps combined have not finished during the specified `timeout`, this method throws a `TimeoutError`. Passing\n        zero timeout disables this.\n    \n        Parameters\n        ----------\n        modifiers : Union[List[Union[\"Alt\", \"Control\", \"Meta\", \"Shift\"]], NoneType]\n            Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current\n            modifiers back. If not specified, currently pressed modifiers are used.\n        position : Union[{x: float, y: float}, NoneType]\n            A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the\n            element.\n        delay : Union[float, NoneType]\n            Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.\n        button : Union[\"left\", \"middle\", \"right\", NoneType]\n            Defaults to `left`.\n        click_count : Union[int, NoneType]\n            defaults to 1. See [UIEvent.detail].\n        timeout : Union[float, NoneType]\n            Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\n            using the `browser_context.set_default_timeout()` or `page.set_default_timeout()` methods.\n        force : Union[bool, NoneType]\n            Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.\n        no_wait_after : Union[bool, NoneType]\n            Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\n            opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\n            inaccessible pages. Defaults to `false`.\n        trial : Union[bool, NoneType]\n            When set, this method only performs the [actionability](./actionability.md) checks and skips the action. Defaults to\n            `false`. Useful to wait until the element is ready for the action without performing it.\n        \"\"\"\n    \n        return mapping.from_maybe_impl(\n>           self._sync(\n                \"locator.click\",\n                self._impl_obj.click(\n                    modifiers=modifiers,\n                    position=position,\n                    delay=delay,\n                    button=button,\n                    clickCount=click_count,\n                    timeout=timeout,\n                    force=force,\n                    noWaitAfter=no_wait_after,\n                    trial=trial,\n                ),\n            )\n        )\n\nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:12207: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Locator frame=<Frame name= url='https://www.foxsports.com.au/video'> selector='//div[@aria-labe =\"video thumbnail row\"][1]/div/div[2]'>\napi_name = 'locator.click', coro = <coroutine object Locator.click at 0x000001B16E567240>\n\n    def _sync(self, api_name: str, coro: Awaitable) -> Any:\n        g_self = greenlet.getcurrent()\n        task = self._loop.create_task(coro)\n        setattr(task, \"__pw_api_name__\", api_name)\n        setattr(task, \"__pw_stack_trace__\", traceback.extract_stack())\n    \n        def callback(result: Any) -> None:\n            g_self.switch()\n    \n        task.add_done_callback(callback)\n        while not task.done():\n            self._dispatcher_fiber.switch()\n        asyncio._set_running_loop(self._loop)\n>       return task.result()\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Locator frame=<Frame name= url='https://www.foxsports.com.au/video'> selector='//div[@aria-labe =\"video thumbnail row\"][1]/div/div[2]'>\nmodifiers = None, position = None, delay = None, button = None, clickCount = None, timeout = None, force = None, noWaitAfter = None\ntrial = None\n\n    async def click(\n        self,\n        modifiers: List[KeyboardModifier] = None,\n        position: Position = None,\n        delay: float = None,\n        button: MouseButton = None,\n        clickCount: int = None,\n        timeout: float = None,\n        force: bool = None,\n        noWaitAfter: bool = None,\n        trial: bool = None,\n    ) -> None:\n        params = locals_to_params(locals())\n>       return await self._frame.click(self._selector, strict=True, **params)\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_locator.py:144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Frame name= url='https://www.foxsports.com.au/video'>, selector = '//div[@aria-labe =\"video thumbnail row\"][1]/div/div[2]'\nmodifiers = None, position = None, delay = None, button = None, clickCount = None, timeout = None, force = None, noWaitAfter = None\nstrict = True, trial = None\n\n    async def click(\n        self,\n        selector: str,\n        modifiers: List[KeyboardModifier] = None,\n        position: Position = None,\n        delay: float = None,\n        button: MouseButton = None,\n        clickCount: int = None,\n        timeout: float = None,\n        force: bool = None,\n        noWaitAfter: bool = None,\n        strict: bool = None,\n        trial: bool = None,\n    ) -> None:\n>       await self._channel.send(\"click\", locals_to_params(locals()))\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_frame.py:460: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x000001B169D70CA0>, method = 'click'\nparams = {'selector': '//div[@aria-labe =\"video thumbnail row\"][1]/div/div[2]', 'strict': True}\n\n    async def send(self, method: str, params: Dict = None) -> Any:\n>       return await self.inner_send(method, params, False)\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x000001B169D70CA0>, method = 'click'\nparams = {'selector': '//div[@aria-labe =\"video thumbnail row\"][1]/div/div[2]', 'strict': True}, return_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.\nE       =========================== logs ===========================\nE       waiting for selector \"//div[@aria-labe =\"video thumbnail row\"][1]/div/div[2]\"\nE       ============================================================\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:63: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\npage = <Page url='https://www.foxsports.com.au/video'>, home_page = <pages.home.FoxtelHomePage object at 0x000001B16D2C3790>\nvideo_page = <pages.videos.FoxtelVideoPage object at 0x000001B16D2AE7C0>\n\n    @pytest.mark.video\n    def test_launch_video(\n        page: Page,\n        home_page: FoxtelHomePage,\n        video_page: FoxtelVideoPage) -> None:\n    \n        #### Scenario 1: #####\n    \n    \n        # Given the Foxtel home page is displayed\n        home_page.load()\n    \n        # Close popup if exists\n        home_page.close_popup()\n    \n        # When video page is launched\n        home_page.click_video_link()\n    \n        # When a video is player by the user\n>       video_page.launch_video()\n\ntests\\test_video_ad.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\videos.py:17: in launch_video\n    self.page.locator(self.video_link).click()\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:86: in __exit__\n    self._event.value\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:66: in value\n    raise self._exception\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntask = <Future finished exception=TimeoutError('Timeout 30000.0ms exceeded while waiting for event \"popup\"\\n=================...===========================\\nwaiting for event \"popup\"\\n============================================================')>\n\n    def done_callback(task: \"asyncio.Future[T]\") -> None:\n        try:\n>           self._value = mapping.from_maybe_impl(self._future.result())\nE           playwright._impl._api_types.TimeoutError: Timeout 30000.0ms exceeded while waiting for event \"popup\"\nE           =========================== logs ===========================\nE           waiting for event \"popup\"\nE           ============================================================\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:52: TimeoutError"}, "parameters": [{"name": "browser_name", "value": "'firefox'"}], "start": 1660451737202, "stop": 1660451784861, "uuid": "177ad498-e2ca-47be-862e-4d9c72dc2cac", "historyId": "57e09918db45fbfa2a3fbb603198b921", "testCaseId": "8c1e4c8d8550b70b3f94c7d2d74d2fc9", "fullName": "tests.test_video_ad#test_launch_video", "labels": [{"name": "tag", "value": "video"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_video_ad"}, {"name": "host", "value": "LAPTOP-LQ138FN7"}, {"name": "thread", "value": "20220-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_video_ad"}]}